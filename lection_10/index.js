// –ú–æ–¥—É–ª—å 5. –ó–∞–Ω—è—Ç–∏–µ 10. –ü—Ä–æ—Ç–æ—Ç–∏–ø—ã –∏ –∫–ª–∞—Å—Å—ã

// =====>

// Object.prototype.sayHello = function () {
// 	console.log("Hello!");
// };

// const a = {};
// console.log(window.sayHello());

// class Parent {
// 	#email = "default";
// 	type = "admin";

// 	set email(value) {
// 		if (!value) return;

// 		this.#email = value;
// 	}
// 	get email() {
// 		if (this.type === "admin") return this.#email;

// 		return "";
// 	}
// }

// const parent = new Parent();

// parent.email = "email@gmail.com";

// console.log(parent.email);

// <=====

// class A {
// 	static PI = 3.14;

// 	password;

// 	constructor(password) {
// 		this.password = password;
// 	}

// 	getRandom() {
// 		return Math.random();
// 	}
// }

// class B extends A {
// 	email;

// 	constructor(email, password) {
// 		super(password);
// 		this.email = email;
// 	}
// }

// const b = new B("@gmail.com", "PWIDJiaowdjj");

// console.log(b);
// console.log(A);

// =>
// Example 1 - –ë–ª–æ–≥–≥–µ—Ä
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å Blogger –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—å–µ–∫—Ç–∞ –±–ª–æ–≥–≥–µ—Ä–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–≤–æ–π—Å—Ç–≤–∞–º–∏:
// email - –ø–æ—á—Ç–∞, —Å—Ç—Ä–æ–∫–∞
// age - –≤–æ–∑—Ä–∞—Å—Ç, —á–∏—Å–ª–æ
// numberOfPosts - –∫–æ–ª-–≤–æ –ø–æ—Å—Ç–æ–≤, —á–∏—Å–ª–æ
// topics - –º–∞—Å—Å–∏–≤ —Ç–µ–º –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –±–ª–æ–≥–≥–µ—Ä
// –ö–ª–∞—Å—Å –æ–∂–∏–¥–∞–µ—Ç –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –æ–¥–Ω–æ–∏–º—ë–Ω–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏.

// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥ getInfo(), –∫–æ—Ç–æ—Ä—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É:
// User ${–ø–æ—á—Ç–∞} is ${–≤–æ–∑—Ä–∞—Å—Ç} years old and has ${–∫–æ–ª-–≤–æ –ø–æ—Å—Ç–æ–≤} posts.

// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥ updatePostCount(value),
// –∫–æ—Ç–æ—Ä—ã–π –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ value –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
// –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

// class Blogger {
// 	email;
// 	age;
// 	numberOfPosts;
// 	topics;

// 	constructor({ age, email, numberOfPosts, topics }) {
// 		this.age = age;
// 		this.email = email;
// 		this.numberOfPosts = numberOfPosts;
// 		this.topics = topics;
// 	}

// 	getInfo() {
// 		return `User ${this.email} is ${this.age} years old and has ${this.numberOfPosts} posts.`;
// 	}

// 	updatePostCount(value) {
// 		if (typeof value !== "number") {
// 			console.error("It's not a number");
// 			return;
// 		}

// 		this.numberOfPosts += value;
// 	}
// }

// const mango = new Blogger({
// 	email: "mango@mail.com",
// 	age: 24,
// 	numberOfPosts: 20,
// 	topics: ["tech", "cooking"],
// });

// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 20 posts
// mango.updatePostCount("");
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 25 posts

// const poly = new Blogger({
// 	email: "poly@mail.com",
// 	age: 19,
// 	numberOfPosts: 17,
// 	topics: ["sports", "gaming", "health"],
// });
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 17 posts
// poly.updatePostCount(4);
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 21 posts

// =>
// Example 2 - –•—Ä–∞–Ω–∏–ª–∏—â–µ
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å Storage –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä–æ–≤.
// –ü—Ä–∏ –≤—ã–∑–æ–≤–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤,
// –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –µ–≥–æ –≤ —Å–≤–æ–π—Å—Ç–≤–æ items.
// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞:
// getItems() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤.
// addItem(item) - –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –∫ —Ç–µ–∫—É—â–∏–º.
// removeItem(item) - –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä –∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ —Ç–µ–∫—É—â–∏—Ö.

// class Storage {
// 	items = [];

// 	constructor(items) {
// 		this.items = items;
// 	}

// 	getItems() {
// 		return this.items;
// 	}

// 	addItem(item) {
// 		this.items.push(item);
// 	}

// 	removeItem(item) {
// 		this.items = this.items.filter((product) => product !== item);
// 	}
// }

// const storage = new Storage(["üçé", "üçã", "üçá", "üçë"]);

// const items = storage.getItems();
// console.table(items); // [ 'üçé', 'üçã', 'üçá', 'üçë' ]

// storage.addItem("üçå");
// console.table(storage.items); // [ 'üçé', 'üçã', 'üçá', 'üçë', 'üçå' ]

// storage.removeItem("üçã");
// console.table(storage.items); // [ 'üçé', 'üçá', 'üçë', 'üçå' ]

// =>
// Example 3 - User
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å User –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ login –∏ email.
// –û–±—ä—è–≤–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ #login –∏ #email,
// –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ç–æ—Ä—ã–º —Å–¥–µ–ª–∞–π —á–µ—Ä–µ–∑ –≥–µ—Ç—Ç–µ—Ä –∏ —Å–µ—Ç—Ç–µ—Ä login –∏ email.

// class User {
// 	#email;
// 	#login;

// 	constructor({ email, login }) {
// 		this.#email = email;
// 		this.#login = login;
// 	}

// 	get login() {
// 		return this.#login;
// 	}

// 	set login(value) {
// 		this.#login = value;
// 	}

// 	get email() {
// 		return this.#email;
// 	}

// 	set email(value) {
// 		this.#email = value;
// 	}
// }

// const mango = new User({
// 	login: "Mango",
// 	email: "mango@dog.woof",
// });

// console.log(mango.login); // Mango
// mango.login = "Mangodoge";
// console.log(mango.login); // Mangodoge

// console.log(mango);

// const poly = new User({
// 	login: "Poly",
// 	email: "poly@mail.com",
// });

// console.log(poly.login); // Poly
// poly.login = "Polycutie";
// console.log(poly.login); // Polycutie

// =>
// Example 4 - –ó–∞–º–µ—Ç–∫–∏
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å Notes –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –∑–∞–º–µ—Ç–æ–∫ –≤ —Å–≤–æ–π—Å—Ç–≤–µ items.
// –ó–∞–º–µ—Ç–∫–∞ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ text –∏ priority.
// –î–æ–±–∞–≤—å –∫–ª–∞—Å—Å—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ Priority,
// –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.

// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥—ã addNote(note), removeNote(text) –∏ updatePriority(text, newPriority).

// class Notes {
// 	static Priority = {
// 		LOW: "low",
// 		NORMAL: "normal",
// 		HIGH: "high",
// 	};

// 	constructor(items) {
// 		this.items = items;
// 	}

// 	addNote(note) {
// 		this.items.push(note);
// 	}

// 	removeNote(text) {
// 		const deleteIndex = this.items.findIndex((item) => item.text === text);

// 		if (deleteIndex === -1) return;

// 		this.items.splice(deleteIndex, 1);
// 	}

// 	updatePriority(text, newPriority) {
// 		const updateIndex = this.items.findIndex((item) => item.text === text);

// 		if (updateIndex === -1) return;

// 		this.items[updateIndex].priority = newPriority;
// 	}
// }

// const myNotes = new Notes([]);

// myNotes.addNote({ text: "–ú–æ—è –ø–µ—Ä–≤–∞—è –∑–∞–º–µ—Ç–∫–∞", priority: Notes.Priority.LOW });
// myNotes.addNote({
// 	text: "–ú–æ—è –≤—Ç–æ—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞",
// 	priority: Notes.Priority.NORMAL,
// });
// console.log(myNotes.items[0]);

// myNotes.removeNote("–ú–æ—è –ø–µ—Ä–≤–∞—è –∑–∞–º–µ—Ç–∫–∞");
// console.log(myNotes.items[0].priority);

// myNotes.updatePriority("–ú–æ—è –≤—Ç–æ—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞", Notes.Priority.HIGH);
// console.log(myNotes.items[0].priority);

// =>
// Example 5 - Toggle
// –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å Toggle –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ {isOpen: boolean}
// –∏ –æ–±—ä—è–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ on - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª/–≤—ã–∫–ª (true/false).
// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ on –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å false.
// –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é toggle, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ on –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ

// class Toggle {
// 	constructor({ isOpen } = { isOpen: false }) {
// 		this.on = isOpen;
// 	}

// 	toggle() {
// 		this.on = !this.on;
// 	}
// }

// const firstToggle = new Toggle({ isOpen: true });
// console.group("firstToggle");

// console.log(firstToggle.on);
// firstToggle.toggle();
// console.log(firstToggle.on);

// console.groupEnd("firstToggle");

// const secondToggle = new Toggle();
// console.group("secondToggle");

// console.log(secondToggle.on);
// secondToggle.toggle();
// console.log(secondToggle.on);

// console.groupEnd("secondToggle");

// class A {
// 	constructor() {
// 		this.age = 20;
// 	}
// }

// const a = new A();
